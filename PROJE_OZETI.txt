# GymApp Proje Özeti

Bu döküman, GymApp mobil uygulamasının final projesi teslimi için hazırlanmıştır.

## Proje Amacı

GymApp, kullanıcıların kendi antrenman programlarını oluşturmasına, bu programları bir takvime yerleştirmesine ve günlük antrenman performanslarını (set, tekrar, kilo) kaydetmesine olanak tanıyan bir mobil fitness uygulamasıdır.

## Temel Özellikler

- **Kullanıcı Yönetimi:** Kullanıcılar e-posta ile kayıt olabilir ve giriş yapabilirler.
- **Hazır Egzersiz Kütüphanesi:** Uygulama içerisinde kas gruplarına göre kategorize edilmiş 100'den fazla egzersiz bulunmaktadır. Her egzersizin nasıl yapıldığını gösteren bir GIF'i vardır.
- **Kişisel Program Oluşturma:** Kullanıcılar, kütüphanedeki egzersizleri seçerek kendi antrenman programlarını ve bu programlar içindeki günleri (örn: Göğüs Günü, Bacak Günü) oluşturabilirler.
- **Takvim Entegrasyonu:** Oluşturulan programlar, bir başlangıç tarihi, süresi (hafta/ay) ve dinlenme günü sayısı belirtilerek kişisel bir takvime eklenebilir.
- **Günlük Antrenman Takibi:** Kullanıcılar takvim üzerinden herhangi bir antrenman gününe tıklayarak o gün yapılması planlanan egzersizleri görebilir ve kendi performanslarını (kaç set, tekrar, kilo ile çalıştıklarını) kaydedebilirler.
- **Esnek Program Yönetimi:** Kullanıcılar takvimdeki programlarını silebilir, yeni program ekleyebilirler.

## Kullanılan Teknolojiler

- **Frontend:** React Native (Expo)
- **UI Kütüphaneleri:** React Native Calendars, Expo Router
- **Backend & Veritabanı:** Supabase (PostgreSQL)
- **Dil:** TypeScript

## Veritabanı Bilgileri

Uygulama, bulut tabanlı bir servis olan Supabase kullanmaktadır. Bu nedenle herhangi bir yerel veritabanı kurulumu veya SQL dosyası import etme işlemi **gerekmemektedir**. Uygulama kaynak kodları içerisindeki Supabase istemcisi, canlı veritabanına doğrudan bağlanacaktır.

Gerekli olan `SUPABASE_URL` ve `SUPABASE_ANON_KEY` bilgileri `utils/supabase.ts` dosyası içerisinde yer almaktadır ve kodun çalışması için hazırdır.

**Veritabanı Şeması:**

- `user_programs`: Kullanıcının oluşturduğu ana programları tutar. (id, user_id, name, description)
- `program_days`: Bir programa ait antrenman günlerini tutar. (id, program_id, day_name, order)
- `program_exercises`: Bir antrenman gününe eklenen egzersizleri ve planlanan set/tekrar sayılarını tutar. (id, day_id, exercise_id, sets, reps, kilo)
- `exercises_list`: Tüm egzersizlerin ve GIF yollarının bulunduğu ana kütüphane tablosu. (id, name, body_part, gif_url)
- `user_calendar_schedule`: Kullanıcının hangi programı takvimine eklediğini ve başlangıç tarihi gibi ayarları tutar. (id, user_id, program_id, start_date, duration)
- `workout_logs`: Kullanıcının belirli bir tarihte bir egzersiz için girdiği performans verilerini (set, tekrar, kilo) tutar. (id, user_id, program_exercise_id, date, sets, reps, kilo)

## Eksiklikler ve Geliştirilebilecek Yönler

- **Gelişmiş İstatistikler:** Kullanıcının zaman içindeki ilerlemesini (örneğin bir ayda bench press'te kaldırdığı ağırlığın artışı) gösteren grafiksel istatistik sayfaları eklenebilirdi.
- **Sosyal Özellikler:** Arkadaşlar arasında program paylaşımı veya liderlik tabloları gibi sosyal özellikler implemente edilebilirdi.
- **Offline Desteği:** Uygulama şu an için sürekli internet bağlantısı gerektirmektedir. Çevrimdışı kullanım için veri senkronizasyon mekanizması eklenebilirdi.
- **UI/UX İyileştirmeleri:** Bazı ekranlarda kullanıcı deneyimini daha akıcı hale getirecek eklemeler ve iyileştirmeler yapılabilir.

Bu döküman, projenin genel bir bakışını sunmaktadır. Detaylı bilgi için kaynak kodları incelenebilir. 